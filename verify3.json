{
  "openapi": "3.0.2",
  "info": {
    "version": "1.0.0",
    "title": "Loqr VerifyID API",
    "description": "This API supports all the operations supported by Loqr's VerifyID product.\n---\n",
    "termsOfService": "https://loqr.io/terms/",
    "license": {
      "name": "Loqr - All Rights Reserved",
      "url": "https://loqr.io"
    },
    "contact": {
      "name": "Loqr",
      "url": "https://loqr.io",
      "email": "info@loqr.io"
    }
  },
  "servers": [
    {
      "url": "https://api-de.cluster.loqr.io/verify/v2",
      "description": "Staging Environment"
    }
  ],
  "paths": {
    "/tenant/{tenantId}/process": {
      "post": {
        "tags": [
          "process"
        ],
        "operationId": "createProcess",
        "summary": "Create a new digital onboarding process",
        "description": "Create a new digital onboarding process\n\n---\n__Notes:__\n\n  * The creation of a new digital onboarding process triggers the creation of an identity, that is automatically binded to the process\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ProcessDataMessage"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/ProcessCreated"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/process/{processId}": {
      "put": {
        "tags": [
          "process"
        ],
        "operationId": "updateProcessData",
        "summary": "Update the data associated to a verifyId process",
        "description": "Update the data associated to a verifyId process\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processId",
            "in": "path",
            "description": "Process ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ProcessData"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProcessUpdated"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      },
      "get": {
        "tags": [
          "process"
        ],
        "operationId": "getProcessData",
        "summary": "Obtain the data associated to a given digital process",
        "description": "Obtain the data associated to a given digital process\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processId",
            "in": "path",
            "description": "Process ID of the related process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnSources",
            "in": "query",
            "description": "Process if the `sources` response field should be filled in",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProcessResponse"
          }
        }
      }
    },
    "/tenant/{tenantId}/process/{processId}/state": {
      "get": {
        "tags": [
          "process"
        ],
        "operationId": "getProcessState",
        "summary": "Obtain a process state",
        "description": "Obtain a process state\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processId",
            "in": "path",
            "description": "Process ID of the related process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProcessStateMessage"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/process/{processId}/state/history": {
      "get": {
        "tags": [
          "process"
        ],
        "operationId": "getProcessStateHistory",
        "summary": "Returns the process' state history. Index 0 contains the current state while the last index contains the initial state.",
        "description": "Obtain a process state\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processId",
            "in": "path",
            "description": "Process ID of the related process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StateHistoryMessage"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/process/{processId}/document/binary": {
      "post": {
        "tags": [
          "process"
        ],
        "operationId": "attachProcessDocumentBinary",
        "summary": "Attach a document to a given digital identity by binary upload",
        "description": "Attach a document to a given process by binary upload\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processId",
            "in": "path",
            "description": "Identity ID of the related identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "Optionally request a timestamp to be applied to this document",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DocumentDataMessage"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AttachDocumentResponseMessage"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/process/{processId}/documents": {
      "post": {
        "tags": [
          "process"
        ],
        "operationId": "attachProcessDocument",
        "summary": "Attach a document to a given digital process",
        "description": "Attach a document to a given digital process\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "example": "10000",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processId",
            "in": "path",
            "description": "Process ID of the related process",
            "example": "DBE18A11-ACA4-4339-9AFC-D77495CE3538",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "blob": {
                    "type": "string",
                    "format": "binary",
                    "description": "The PDF to be signed.",
                    "example": "document.pdf",
                    "required": true
                  },
                  "payload": {
                    "type": "object",
                    "properties": {
                      "docType": {
                        "type": "string",
                        "description": "Type of document being uploaded.",
                        "example": "Contract"
                      },
                      "filename": {
                        "type": "string",
                        "description": "The name of the document being uploaded.",
                        "example": "Contract.pdf"
                      },
                      "toSign": {
                        "type": "boolean",
                        "description": "Flag the document has required to be digitaly signed."
                      }
                    }
                  }
                }
              }
            }
          }          
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AttachDocumentResponseMessage"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      },
      "get": {
        "tags": [
          "process"
        ],
        "operationId": "getProcessDocumentByQuery",
        "summary": "Process documents list",
        "description": "Obtain the process documents list that matches a given query\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processId",
            "in": "path",
            "description": "The processId Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },  
          {
            "name": "docType",
            "in": "query",
            "description": "Filter process documents by document Type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latest",
            "in": "query",
            "description": "Retrieve only the latest document of each document type",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "toSign",
            "in": "query",
            "description": "Retrieve only the process documents flagged to be signed",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "signed",
            "in": "query",
            "description": "Filter process documents that were digitaly signed",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeBlob",
            "in": "query",
            "description": "Include the document binary content endoded in Base64",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter documents that contains any of the given tags",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "marketing, toRead"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DocumentsList"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/process/{processId}/document/{documentId}/data": {
      "get": {
        "tags": [
          "process"
        ],
        "operationId": "getProcessDocumentDataByQuery",
        "summary": "Obtain a process document data that matches a given query",
        "description": "Obtain a process document data that matches a given query\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processId",
            "in": "path",
            "description": "ProcessId ID of the related process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document ID of the related document",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DocumentData"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/process/{processId}/invite": {
      "post": {
        "tags": [
          "process"
        ],
        "operationId": "createProcessInvite",
        "summary": "Generate an invite to add a new identity to process",
        "description": "Generate an invite to add a new identity to process\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processId",
            "in": "path",
            "description": "ProcessId ID of the related process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ProcessInvite"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProcessInviteResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/invite/{inviteId}": {
      "put": {
        "tags": [
          "process"
        ],
        "operationId": "generateIdentityForInvite",
        "summary": "Generate and attach a new idnetity to  a process",
        "description": "Generate and attach a new idnetity to  a process\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inviteId",
            "in": "path",
            "description": "Invite ID to join process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ProcessInvite"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProcessInviteAccepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/identity/{identityId}": {
      "put": {
        "tags": [
          "identity"
        ],
        "operationId": "updateIdentityData",
        "summary": "Update the data associated to a given digital identity",
        "description": "Update the data associated to a given digital identity\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityId",
            "in": "path",
            "description": "Identity ID of the related identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/IdentityData"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/IdentityUpdated"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      },
      "get": {
        "tags": [
          "identity"
        ],
        "operationId": "getIdentityData",
        "summary": "Obtain the data associated to a given digital identity",
        "description": "Obtain the data associated to a given digital identity\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityId",
            "in": "path",
            "description": "Identity ID of the related identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnSources",
            "in": "query",
            "description": "Identify if the `sources` response field should be filled in",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IdentityResponse"
          }
        }
      }
    },
    "/tenant/{tenantId}/identity/{identityId}/state": {
      "get": {
        "tags": [
          "identity"
        ],
        "operationId": "getIdentityState",
        "summary": "Obtain a identity state",
        "description": "Obtain a identity state\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityId",
            "in": "path",
            "description": "IdentityId ID of the related process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IdentityStateMessage"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/identity/{identityId}/state/history": {
      "get": {
        "tags": [
          "identity"
        ],
        "operationId": "getIdentityStateHistory",
        "summary": "Returns the identity's state history.",
        "description": "Returns the identity's state history. Index 0 contains the current state while the last index contains the initial state.",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityId",
            "in": "path",
            "description": "IdentityId ID of the related process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StateHistoryMessage"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/identity/{identityId}/validateContact/phone/request": {
      "post": {
        "tags": [
          "identity"
        ],
        "operationId": "requestPhoneContactValidation",
        "summary": "Request the sending of an SMS to trigger the contact validation",
        "description": "Request the sending of an SMS to trigger the contact validation\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityId",
            "in": "path",
            "description": "Identity ID of the related identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResponseStatusMessage"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/identity/{identityId}/validateContact/phone": {
      "post": {
        "tags": [
          "identity"
        ],
        "operationId": "validatePhoneContact",
        "summary": "Send the OTP received by SMS to validate the contact",
        "description": "Send the OTP received by SMS to validate the contact\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityId",
            "in": "path",
            "description": "Identity ID of the related identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ValidateContactMessage"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResponseStatusMessage"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/identity/{identityId}/validateContact/phone/confirmed": {
      "get": {
        "tags": [
          "identity"
        ],
        "operationId": "checkIfContactIsValidated",
        "summary": "Check if the phone contact is validated",
        "description": "Check if the phone contact is validated",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityId",
            "in": "path",
            "description": "Identity ID of the related identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneConfirmedMessage"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/identity/{identityId}/documents": {
      "post": {
        "tags": [
          "identity"
        ],
        "operationId": "attachIdentityDocument",
        "summary": "Attach a document to a given digital identity",
        "description": "Attach a document to a given digital identity\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "example": "10000",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identity",
            "in": "path",
            "description": "Identity ID of the related identity",
            "example": "DBE18A11-ACA4-4339-9AFC-D77495CE3538",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "blob": {
                    "type": "string",
                    "format": "binary",
                    "description": "The PDF to be signed.",
                    "example": "document.pdf",
                    "required": true
                  },
                  "payload": {
                    "type": "object",
                    "properties": {
                      "docType": {
                        "type": "string",
                        "description": "Type of document being uploaded.",
                        "example": "Contract"
                      },
                      "filename": {
                        "type": "string",
                        "description": "The name of the document being uploaded.",
                        "example": "Contract.pdf"
                      },
                      "toSign": {
                        "type": "boolean",
                        "description": "Flag the document has required to be digitaly signed."
                      }
                    }
                  }
                }
              }
            }
          }          
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AttachDocumentResponseMessage"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      },
      "get": {
        "tags": [
          "identity"
        ],
        "operationId": "getIdentityDocumentByQuery",
        "summary": "Identity documents list",
        "description": "Obtain the identity documents list that matches a given query\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processId",
            "in": "path",
            "description": "The processId Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },  
          {
            "name": "docType",
            "in": "query",
            "description": "Filter process documents by document Type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latest",
            "in": "query",
            "description": "Retrieve only the latest document of each document type",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "toSign",
            "in": "query",
            "description": "Retrieve only the process documents flagged to be signed",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "signed",
            "in": "query",
            "description": "Filter process documents that were digitaly signed",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeBlob",
            "in": "query",
            "description": "Include the document binary content endoded in Base64",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter documents that contains any of the given tags",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "marketing, toRead"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DocumentsList"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/identity/{identityId}/document/{documentId}/data": {
      "get": {
        "tags": [
          "identity"
        ],
        "operationId": "getIdentityDocumentDataByQuery",
        "summary": "Obtain a identity document data that matches a given query",
        "description": "Obtain a identity document data that matches a given query\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityId",
            "in": "path",
            "description": "Identity ID of the related process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document ID of the related document",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DocumentData"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/identity/{identityId}/document/binary": {
      "post": {
        "tags": [
          "identity"
        ],
        "operationId": "attachIdentityDocumentBinary",
        "summary": "Attach a document to a given digital identity by binary upload",
        "description": "Attach a document to a given digital identity by binary upload\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityId",
            "in": "path",
            "description": "Identity ID of the related identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "Optionally request a timestamp to be applied to this document",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DocumentDataMessage"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AttachDocumentResponseMessage"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/identity/{identityId}/statusCheck": {
      "get": {
        "tags": [
          "identity"
        ],
        "operationId": "statusCheck",
        "summary": "At any given moment you can validate the Identity Status, Do not mistake this with the Get State method. This one provides detailed information about the current ongoing identity status verification check.",
        "description": "Provides detailed information about the current ongoing identity status verification check.",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityId",
            "in": "path",
            "description": "Identity ID of the related identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/*": {
                "schema": {
                  "properties": {
                    "checkType": {
                      "type": "string"
                    },
                    "checkStatus": {
                      "type": "string"
                    },
                    "checkItems": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "itemType": {
                            "type": "string"
                          },
                          "item": {
                            "type": "string"
                          },
                          "result": {
                            "type": "string"
                          },
                          "details": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "header": {
                      "correlationId": "string",
                      "traceID": "string",
                      "JWT": "string",
                      "extraProperties": [
                        {
                          "key": "string",
                          "value": "string"
                        }
                      ]
                    },
                    "payload": {
                      "statusCheck": [
                        {
                          "checkType": "verification",
                          "checkStatus": "FINAL_ERROR",
                          "checkItems": [
                            {
                              "itemType": "dataModel",
                              "item": "string",
                              "result": "string",
                              "details": "string"
                            },
                            {
                              "itemType": "document",
                              "item": "string",
                              "result": "string",
                              "details": "string"
                            },
                            {
                              "itemType": "interview",
                              "item": "string",
                              "result": "string",
                              "details": "string"
                            }
                          ]
                        },
                        {
                          "checkType": "documentation",
                          "checkStatus": "NOT_OK",
                          "checkItems": [
                            {
                              "itemType": "document",
                              "item": "string",
                              "result": "string",
                              "details": "string"
                            }
                          ]
                        },
                        {
                          "checkType": "aml",
                          "checkStatus": "SUCCESS",
                          "checkItems": []
                        }
                      ]
                    },
                    "responseStatus": {
                      "status": 200,
                      "statusCodes": [
                        {
                          "code": "string",
                          "message": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/identity/{identityId}/pointer": {
      "post": {
        "tags": [
          "identity"
        ],
        "operationId": "createIdentityPointer",
        "summary": "Create a pointer for a specific identity",
        "description": "Create a pointer for a specific identity\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityId",
            "in": "path",
            "description": "Identity ID of the related identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreatePointer"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResponseStatusMessage"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/identity/byPointer": {
      "get": {
        "tags": [
          "identity"
        ],
        "operationId": "getIdentityByPointer",
        "summary": "Obtain an identity that is referenced by a specific pointer value",
        "description": "Obtain an identity that is referenced by a specific pointer value\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pointerValue",
            "required": true,
            "description": "Value of the pointer",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IdentityResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/identity/{identityId}/interview": {
      "get": {
        "tags": [
          "identity"
        ],
        "operationId": "getIdentityInterviews",
        "summary": "Obtain a list of interviews for a given identityId",
        "description": "Obtain a list of interviews for a given identityId\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityId",
            "in": "path",
            "description": "IdentityId of the related identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/*": {
                "schema": {
                  "example": {
                    "header": {
                      "correlationId": "string",
                      "traceID": "string"
                    },
                    "payload": {
                      "data": [
                        {
                          "interviewId": "uuid",
                          "state": "string",
                          "created": "date-time",
                          "startTime": "date-time",
                          "endTime": "date-time"
                        }
                      ]
                    },
                    "responseStatus": {
                      "status": 200,
                      "statusCodes": [
                        {
                          "code": "string",
                          "message": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/interview/{interviewId}/document": {
      "get": {
        "tags": [
          "interview"
        ],
        "operationId": "getInterviewDocumentByQuery",
        "summary": "Obtain an interview document binary that matches a given query",
        "description": "Obtain an interview document binary that matches a given query\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interviewId",
            "in": "path",
            "description": "InterviewId of the related identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "docType",
            "in": "query",
            "description": "Type of the document to be returned",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/util/getAsyncExecutionStatus/{asyncExecutionId}": {
      "get": {
        "tags": [
          "util"
        ],
        "operationId": "getAsyncExecutionStatus",
        "summary": "Enquire about the state of an asynchronous execution",
        "description": "Enquire about the state of an asynchronous execution\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "required": true,
            "name": "asyncExecutionId",
            "description": "Unique ID a queued asynchronous execution",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AsyncExecutionStatusMessage"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/service/uis/v2/util/addressByZipCode": {
      "get": {
        "tags": [
          "util"
        ],
        "operationId": "getAddressByZipCode",
        "summary": "Search addresses by zip code",
        "description": "Search addresses by zip code\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "c",
            "description": "Country code",
            "required": true,
            "schema": {
              "type": "string",
              "example": "pt"
            }
          },
          {
            "in": "query",
            "name": "pc",
            "description": "Postal code",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4610-153"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AdressResponseMessage"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "BadRequestMessage": {
        "description": "Bad Request\n- Check Loqr Developer Portal for more detailed information\n"
      },
      "UnauthorizedMessage": {
        "description": "Unauthorized\n - Check Loqr Developer Portal for more detailed information\n"
      },
      "ForbiddenMessage": {
        "description": "Forbidden\n - Check Loqr Developer Portal for more detailed information\n"
      },
      "NotFoundMessage": {
        "description": "Not Found\n- Check Loqr Developer Portal for more detailed information\n"
      },
      "InternalServerErrorMessage": {
        "description": "Internal Server Error\n- Check Loqr Developer Portal for more detailed information\n"
      },
      "AsyncExecutionStatusMessage": {
        "description": "AsyncExecutionStatus",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AsyncExecutionStatusMessage"
            }
          }
        }
      },
      "ProcessUpdated": {
        "description": "Process Updated with Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProcessUpdated"
            }
          }
        }
      },
      "AdressResponseMessage": {
        "description": "Address Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AddressMessage"
            }
          }
        }
      },
      "ProcessCreated": {
        "description": "Process Created with Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProcessCreated"
            }
          }
        }
      },
      "ProcessInviteAccepted": {
        "description": "Process Invite Accepted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProcessInviteAcceptedResponseBody"
            }
          }
        }
      },
      "ProcessStateMessage": {
        "description": "Process Response Message",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProcessStateResponse"
            }
          }
        }
      },
      "StateHistoryMessage": {
        "description": "State History Response Message",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/StateHistoryResponse"
            }
          }
        }
      },
      "IdentityStateMessage": {
        "description": "Identity Response Message",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/IdentityStateResponse"
            }
          }
        }
      },
      "ProcessInviteResponse": {
        "description": "Invite for process generated",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProcessInviteResponseBody"
            }
          }
        }
      },
      "IdentityUpdated": {
        "description": "Identity Updated with Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/IdentityUpdated"
            }
          }
        }
      },
      "DocumentData": {
        "description": "Document Data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DocumentDataDetails"
            }
          }
        }
      },
      "DocumentsList": {
        "description": "Documents list",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DocumentsListDetails"
            }
          }
        }
      },
      "PhoneConfirmedMessage": {
        "description": "Phone Confirmation Message",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PhoneConfirmedMessage"
            }
          }
        }
      },
      "AttachDocumentResponseMessage": {
        "description": "Attachement Document Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AttachDocumentResponseMessage"
            }
          }
        }
      },
      "ResponseStatusMessage": {
        "description": "Response Status Message empty",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResponseStatusMessage"
            }
          }
        }
      },
      "IdentityResponse": {
        "description": "Identitity Response Message",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/IdentityResponse"
            }
          }
        }
      },
      "ProcessResponse": {
        "description": "Process Response Message",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProcessResponse"
            }
          }
        }
      }
    },
    "requestBodies": {
      "ProcessData": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProcessData"
            }
          }
        },
        "required": true
      },
      "IdentityData": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/IdentityData"
            }
          }
        },
        "required": true
      },
      "ProcessDataMessage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProcessDataMessage"
            }
          }
        },
        "required": true
      },
      "DocumentDataMessage": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "$ref": "#/components/schemas/DocumentDataMessage"
            }
          }
        },
        "description": "Document contents and metadata",
        "required": true
      },
      "ValidateContactMessage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidateContactMessage"
            }
          }
        },
        "description": "Validate Contact",
        "required": true
      },
      "ProcessInvite": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProcessInvite"
            }
          }
        },
        "description": "Process Invite",
        "required": true
      },
      "CreatePointer": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreatePointer"
            }
          }
        },
        "description": "Create Pointer",
        "required": true
      }
    },
    "schemas": {
      "StatusCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "status code"
          },
          "message": {
            "type": "string",
            "description": "message related to the status code"
          }
        }
      },
      "ResponseStateStatus": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "example": 200
          },
          "statusCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusCode"
            }
          }
        }
      },
      "ResponseStatus": {
        "type": "object",
        "properties": {
          "statusCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusCode"
            }
          }
        }
      },
      "ResponseStatusMessage": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStatus"
          }
        }
      },
      "ExtraProperty": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The unique ID of a property."
          },
          "value": {
            "type": "string",
            "description": "The value of the unioque ID."
          }
        }
      },
      "Header": {
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "The unique ID of a group of transactions"
          },
          "traceID": {
            "type": "string",
            "description": "The unique ID of a transaction"
          },
          "JWT": {
            "type": "string",
            "description": "The authentication token"
          },
          "extraProperties": {
            "type": "array",
            "description": "Extra propoerties that are not hardly mapped on the object",
            "items": {
              "$ref": "#/components/schemas/ExtraProperty"
            }
          }
        }
      },
      "ProcessData": {
        "type": "object",
        "description": "Model that represents the information about a digital onboarding process to be created in the system",
        "properties": {
          "processId": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ProcessDataSources"
          },
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessDataPayload"
            }
          }
        }
      },
      "ProcessInvitePayload": {
        "type": "object",
        "description": "Model that represents an empty object",
        "properties": {
          "validation": {
            "type": "object",
            "example": {
              "key1": "value1",
              "key2": "value2"
            }
          }
        }
      },
      "ProcessInvite": {
        "type": "object",
        "description": "Model that represents the information used to validate the invite",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/ProcessInvitePayload"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "ProcessCreated": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/ProcessCreatedPayload"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "ProcessInviteAcceptedResponseBody": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/ProcessInviteAcceptedResponseData"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "ProcessCreatedPayload": {
        "required": [
          "processId",
          "identityId"
        ],
        "type": "object",
        "properties": {
          "processId": {
            "type": "string",
            "description": "The unique ID of the created process.",
            "example": "bd77eafb-7b6d-42e1-ae26-0678fec45ffa"
          },
          "identityId": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The unique ID of a created identity.",
              "example": "018589f2-bc41-49fc-a3d4-4d8be7b6567c"
            }
          }
        }
      },
      "ProcessInviteAcceptedResponse": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/ProcessInviteAcceptedResponseData"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "ProcessDataMessage": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/ProcessData"
          }
        }
      },
      "ProcessDataSources": {
        "description": "Holds the process specific data, split between the different sources\nIt may include several sources, but each each data field shall not be included in more than one field\n",
        "type": "object"
      },
      "CreatePointer": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "type": "object",
            "properties": {
              "pointerValue": {
                "type": "string"
              }
            }
          }
        }
      },
      "IdentityData": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/IdentityDataPayload"
          }
        }
      },
      "IdentityDataPayload": {
        "type": "object",
        "description": "Model that represents the information about a digital identity to be onboarded",
        "properties": {
          "identityId": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "description": "Identity order number"
          },
          "data": {
            "$ref": "#/components/schemas/IdentityDataSources"
          }
        }
      },
      "ProcessDataPayload": {
        "type": "object",
        "description": "Model that represents the information about a digital process to be onboarded",
        "properties": {
          "processId": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ProcessDataSources"
          }
        }
      },
      "ProcessIdentityDataPayload": {
        "type": "object",
        "description": "Model that represents the information about a digital process to be onboarded",
        "properties": {
          "state": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ProcessDataSources"
          }
        }
      },
      "IdentityDataSources": {
        "description": "Holds the identity data, split between the different sources\nIt may include several sources, but each each data field shall not be included in more than one field\n",
        "type": "object",
        "properties": {
          "user": {
            "type": "object"
          }
        }
      },
      "IdentityResponse": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/Identity"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "ProcessResponse": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/Process"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "Identity": {
        "type": "object",
        "description": "Model that represents the information about an already existing digital identity",
        "required": [
          "tenantId",
          "identityId",
          "state"
        ],
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "identityId": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "info": {
            "$ref": "#/components/schemas/IdentityDataModel"
          },
          "sources": {
            "$ref": "#/components/schemas/IdentityDataSources"
          },
          "control": {
            "$ref": "#/components/schemas/IdentityControlData"
          },
          "order": {
            "type": "integer",
            "description": "Identity order number"
          },
          "currentOperator": {
            "type": "string",
            "description": "Id of the operator that is blocking the Identity"
          },
          "lastAuthor": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "deviceUuid": {
            "type": "string"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMetadata"
            }
          }
        }
      },
      "Process": {
        "type": "object",
        "description": "Model that represents the information about an already existing digital process",
        "required": [
          "tenantId",
          "processId",
          "identities",
          "state"
        ],
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessIdentityDataPayload"
            }
          },
          "state": {
            "type": "string"
          },
          "info": {
            "$ref": "#/components/schemas/IdentityDataModel"
          },
          "sources": {
            "$ref": "#/components/schemas/IdentityDataSources"
          },
          "lastAuthor": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMetadata"
            }
          }
        }
      },
      "IdentityControlData": {
        "description": "Holds the identity control data",
        "properties": {
          "flows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlowExecData"
            }
          }
        }
      },
      "FlowExecData": {
        "description": "Flow execution data",
        "properties": {
          "flowType": {
            "type": "string",
            "description": "Type of the executed flow"
          },
          "flowExecID": {
            "description": "Identifier of the execution of the flow in the execution order",
            "type": "string",
            "format": "uuid"
          },
          "execInstant": {
            "description": "The instant when the flow was started",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "IdentityDataModel": {
        "description": "Holds the identity data",
        "type": "object"
      },
      "ProcessDataModel": {
        "description": "Holds the process data",
        "type": "object"
      },
      "ProcessInviteResponseBody": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/ProcessInviteResponsePayload"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "IdentityUpdated": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/IdentityUpdatedPayload"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "ProcessStateResponse": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/ProcessState"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "StateHistoryResponse": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/StateHistory"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "ProcessState": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string"
          }
        }
      },
      "StateHistoryEntry": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "author": {
            "type": "string"
          }
        }
      },
      "StateHistory": {
        "type": "object",
        "properties": {
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StateHistoryEntry"
            }
          }
        }
      },
      "IdentityStateResponse": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/IdentityState"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "IdentityState": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string"
          }
        }
      },
      "DocumentMetadata": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "digestAlgorithm": {
            "type": "string"
          },
          "digestValue": {
            "type": "string"
          },
          "timestamp": {
            "type": "object",
            "properties": {
              "dateTime": {
                "type": "string",
                "format": "date-time"
              },
              "issuerDN": {
                "type": "string"
              },
              "token": {
                "type": "string"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProcessInviteResponsePayload": {
        "type": "object",
        "properties": {
          "inviteId": {
            "type": "string",
            "example": "03f16302-ed0e-4aad-a941-ebdf61dc3fc9"
          }
        }
      },
      "ProcessInviteAcceptedResponseData": {
        "type": "object",
        "properties": {
          "identityId": {
            "type": "string",
            "example": "13965417-a1ca-4dee-9ca6-6c443cab6445"
          },
          "processId": {
            "type": "string",
            "example": "cb22ba3f-2e7b-416c-a680-c29e2d6de6c2"
          }
        }
      },
      "IdentityUpdatedPayload": {
        "type": "object",
        "properties": {
          "asyncExecutionId": {
            "type": "string",
            "description": "If the update triggers some action, this Id is used to query about the status of that execution",
            "example": "bd77eafb-7b6d-42e1-ae26-0678fec45ffa"
          },
          "currentState": {
            "type": "string",
            "example": "DA.A.01"
          },
          "finalState": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "PhoneConfirmedMessage": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/PhoneConfirmedPayload"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "PhoneConfirmedPayload": {
        "type": "object",
        "properties": {
          "isConfirmed": {
            "type": "boolean",
            "description": "Indication of whether the phone number was already confirmed or not",
            "example": true
          }
        }
      },
      "DocumentDataMessage": {
        "description": "Document Data Message",
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/DocumentData"
          },
          "blob": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "DocumentData": {
        "required": [
          "blob",
          "docType"
        ],
        "type": "object",
        "properties": {
          "docType": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          }
        }
      },
      "ProcessUpdated": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/ProcessUpdatedPayload"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "ProcessUpdatedPayload": {
        "type": "object",
        "properties": {
          "asyncExecutionId": {
            "type": "string",
            "description": "If the update triggers some action, this Id is used to query about the status of that execution",
            "example": "bd77eafb-7b6d-42e1-ae26-0678fec45ffa"
          },
          "currentState": {
            "type": "string",
            "example": "DA.A.01"
          },
          "finalState": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "AttachDocumentResponseMessage": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/AttachDocumentResponse"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "AttachDocumentResponse": {
        "required": [
          "documentId"
        ],
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "description": "The unique ID of the attached document.",
            "example": "4e833472-ba36-451d-b4b1-87098e5127d7"
          }
        }
      },
      "ValidateContactMessage": {
        "description": "Validate Contact Message",
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/ValidateContactData"
          }
        }
      },
      "ValidateContactData": {
        "required": [
          "smsCode"
        ],
        "type": "object",
        "properties": {
          "smsCode": {
            "type": "string",
            "example": "858949"
          }
        }
      },
      "AddressMessage": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/Address"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "address": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressItem"
            }
          }
        }
      },
      "AddressItem": {
        "type": "object",
        "properties": {
          "Codigo_Distrito": {
            "type": "string",
            "example": "13"
          },
          "Codigo_Concelho": {
            "type": "string",
            "example": "03"
          },
          "Codigo_Localidade": {
            "type": "number",
            "example": 16677
          },
          "Localidade": {
            "type": "string",
            "example": "Felgueiras"
          },
          "Art_Cod": {
            "type": "string",
            "example": "870313"
          },
          "Art_Tipo": {
            "type": "string",
            "example": "Rua"
          },
          "Pri_Prep": {
            "type": "string",
            "example": "de"
          },
          "Art_Titulo": {
            "type": "string",
            "example": "São"
          },
          "Seg_Prep": {
            "type": "string",
            "example": ""
          },
          "Art_Desig": {
            "type": "string",
            "example": "Félix do Monte"
          },
          "Art_Local": {
            "type": "string",
            "example": ""
          },
          "Troco": {
            "type": "string",
            "example": ""
          },
          "Porta": {
            "type": "string",
            "example": ""
          },
          "Cliente": {
            "type": "string",
            "example": ""
          },
          "CPALF": {
            "type": "string",
            "example": "FELGUEIRAS"
          }
        }
      },
      "AsyncExecutionStatusMessage": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/AsyncExecutionStatus"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "AsyncExecutionStatus": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "Current status of the given asynchronous execution process",
            "enum": [
              "UNKNOWN",
              "PENDING",
              "FAILED",
              "COMPLETED"
            ]
          },
          "responseBody": {
            "type": "object",
            "description": "Response of the asynchronous execution"
          },
          "retryInterval": {
            "format": "int64",
            "description": "Interval (in miliseconds) after which a new status check should be performed",
            "type": "integer",
            "example": 2000
          }
        }
      },
      "DocumentDataDetails": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/DocumentDataDetail"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "DocumentDataDetail": {
        "type": "object",
        "description": "Model that represents the information about an already existing digital identity",
        "properties": {
          "documentId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "digestAlgorithm": {
            "type": "string"
          },
          "digestValue": {
            "type": "string"
          },
          "timestamp": {
            "type": "object",
            "properties": {
              "dateTime": {
                "type": "string",
                "format": "date-time"
              },
              "issuerDN": {
                "type": "string"
              },
              "token": {
                "type": "string"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "info": {
            "type": "object",
            "properties": {
              "automated": {
                "type": "object"
              },
              "document": {
                "type": "object"
              }
            }
          }
        }
      },
      "DocumentsListDetails": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "payload": {
            "$ref": "#/components/schemas/DocumentsListDetail"
          },
          "responseStatus": {
            "$ref": "#/components/schemas/ResponseStateStatus"
          }
        }
      },
      "DocumentsListDetail": {
        "type": "object",
        "description": "Model that represents the information about a list of documents",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "digestAlgorithm": {
            "type": "string"
          },
          "digestValue": {
            "type": "string"
          },
          "timestamp": {
            "type": "object",
            "properties": {
              "dateTime": {
                "type": "string",
                "format": "date-time"
              },
              "issuerDN": {
                "type": "string"
              },
              "token": {
                "type": "string"
              }
            }
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "blob": {
            "type": "string",
            "format": "base64"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "process",
      "description": "Process related routes"
    },
    {
      "name": "identity",
      "description": "Identity related routes"
    },
    {
      "name": "interview",
      "description": "Interview related routes"
    },
    {
      "name": "util",
      "description": "Utility routes"
    }
  ]
}
