{
  "openapi": "3.0.2",
  "info": {
    "version": "1.0.0",
    "title": "Loqr Authentication API",
    "description": "This API supports all the operations related to the authentication of Loqr's product API consumers.\n---\n",
    "termsOfService": "https://loqr.io/terms/",
    "license": {
      "name": "Loqr - All Rights Reserved",
      "url": "https://loqr.io"
    },
    "contact": {
      "name": "Loqr Developer Portal",
      "url": "https://docs.labs.loqr.io"
    }
  },
  "servers": [
    {
      "url": "https://api-de.cluster.loqr.io/auth/v2",
      "description": "Staging Environment"
    }
  ],
  "paths": {
    "/tenant/{tenantId}/token": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "authenticateTenant",
        "summary": "Obtain a tenant authentication token for use by a backend API consumer",
        "description": "Obtain a tenant authentication token for use by a backend API consumer\n\n---\n__Notes:__\n\n  * The authentication process is compliant with the OAuth2 spec\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AuthenticationDataMessage"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthenticationDone"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/token/mobile": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "authenticateIdentityMobile",
        "summary": "Obtain an authentication token for use mobile-based API consumer",
        "description": "Obtain an authentication token for use mobile-based API consumer\n\nThe client_secret on the mobile needs to be the identityId signed by the mobile secret of the binded keys\n\n---\n__Notes:__\n\n  * The authentication process is compliant with the OAuth2 spec\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AuthenticationDataMessage"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthenticationDone"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/token/identity/{identityId}/otp": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "identitySendSMSOTP",
        "summary": "Send a SMS OTP to the Phone Number Identity",
        "description": "Send a SMS OTP to the Phone Nunber Identity\n\n---\n__Notes:__\n\n  * The identityId must have PHONE NUMBER type\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityId",
            "in": "path",
            "description": "Identity ID of the related identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/token/identity": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "authenticateIdentity",
        "summary": "Obtain an authentication token for use browser-based API consumer",
        "description": "Obtain an authentication token for use browser-based API consumer\n\nWhen obtainind a token by a SMS OTP, the OTP needs to be sent on the client_secret body field\n\n---\n__Notes:__\n\n  * The authentication process is compliant with the OAuth2 spec\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AuthenticationDataMessage"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthenticationDone"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/token/identity/delegated": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "authenticateIdentityBackend",
        "summary": "Obtain an identity token based on the authentication peformed by the tenant",
        "description": "Obtain an identity token based on the authentication peformed by the tenant\n\nThe client_secret needs to be the tenant token\n\n---\n__Notes:__\n\n  * The authentication process is compliant with the OAuth2 spec\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AuthenticationDataMessage"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthenticationDone"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    },
    "/tenant/{tenantId}/token/identity/renew": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "renewIdentityByToken",
        "summary": "Obtain a renewed token by passing a almost expired valid token",
        "description": "Obtain a renewed token by passing a almost expired valid token\n\nWe only allow 3 renews for the same chain of renews\n",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RenewTokenDataMessage"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthenticationDone"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedMessage"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenMessage"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMessage"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorMessage"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "BadRequestMessage": {
        "description": "Bad Request\n- Check Loqr Developer Portal for more detailed information\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResponseStateStatus"
            }
          }
        }
      },
      "UnauthorizedMessage": {
        "description": "Unauthorized\n - Check Loqr Developer Portal for more detailed information\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResponseStateStatus"
            }
          }
        }
      },
      "ForbiddenMessage": {
        "description": "Forbidden\n - Check Loqr Developer Portal for more detailed information\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResponseStateStatus"
            }
          }
        }
      },
      "NotFoundMessage": {
        "description": "Not Found\n- Check Loqr Developer Portal for more detailed information\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResponseStateStatus"
            }
          }
        }
      },
      "InternalServerErrorMessage": {
        "description": "Internal Server Error\n- Check Loqr Developer Portal for more detailed information\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResponseStateStatus"
            }
          }
        }
      },
      "AuthenticationDone": {
        "description": "Authentication Done with Sucess",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AuthenticationDone"
            }
          }
        }
      }
    },
    "requestBodies": {
      "AuthenticationDataMessage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AuthenticationDataMessage"
            }
          }
        },
        "required": true
      },
      "RenewTokenDataMessage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RenewTokenDataMessage"
            }
          }
        },
        "required": true
      }
    },
    "schemas": {
      "StatusCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "status code"
          },
          "message": {
            "type": "string",
            "description": "message related to the status code"
          }
        }
      },
      "ResponseStateStatus": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "example": 200
          },
          "statusCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusCode"
            }
          }
        }
      },
      "AuthenticationDone": {
        "$ref": "#/components/schemas/AuthenticationDonePayload"
      },
      "AuthenticationDonePayload": {
        "required": [
          "access_token",
          "token_type",
          "expires_in"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "example": "eyJhbGciOiJIU..."
          },
          "token_type": {
            "type": "string",
            "example": "Bearer"
          },
          "expires_in": {
            "type": "number",
            "example": 3600
          }
        }
      },
      "AuthenticationDataMessage": {
        "$ref": "#/components/schemas/AuthenticationData"
      },
      "AuthenticationData": {
        "type": "object",
        "description": "Model that represents the information about the authentication request",
        "properties": {
          "grant_type": {
            "type": "string",
            "example": "client_credentials"
          },
          "client_id": {
            "type": "string",
            "example": "018589f2-bc41-49fc-a3d4-4d8be7b6567c"
          },
          "client_secret": {
            "type": "string",
            "example": "wHAMzDQ8NBXkVdEVriiyAKh6Tmc25EPr"
          }
        }
      },
      "RenewTokenDataMessage": {
        "$ref": "#/components/schemas/RenewTokenData"
      },
      "RenewTokenData": {
        "type": "object",
        "description": "Valid JWT Token",
        "properties": {
          "token": {
            "type": "string",
            "example": "wHAMzDQ8NBXkVdEVriiyAKh6Tmc25EPr"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Authentication related routes"
    }
  ]
}